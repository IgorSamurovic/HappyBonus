package BonusImpl
import AbilityObjEditing
import Bonus
import BaseDamageBonusImpl
import MoveSpeedBonusImpl
import BonusUserSpecified

/*  
	Do not directly edit this file!
	If you want to change settings contained in this file, you should instead
	create a BonusImpl_config.wurst file.
	If you want to add completely new bonuses that can be accessed by 
	"BONUS.", then you should copy the BonusUserSpecified file to your project,
	and edit it to fit your needs. 
	If you want to create private bonuses that are not indexed in "BONUS.",
	just create them on the fly and associate them with any objects you want.
*/
@configurable constant DAMAGE         	  = new BonusSettings("Damage", 2048)
@configurable constant ATTACK_SPEED       = new BonusSettings("Attack speed", 512)
@configurable constant ARMOR          	  = new BonusSettings("Armor", 256)
@configurable constant HP             	  = new BonusSettings("HP", 16384)
@configurable constant MP             	  = new BonusSettings("MP", 16384)
@configurable constant STRENGTH     	  = new BonusSettings("Strength")
@configurable constant AGILITY 		      = new BonusSettings("Agility")
@configurable constant INTELLIGENCE       = new BonusSettings("Intelligence")
@configurable constant STRENGTH_BASE      = new BonusSettings("Base strength")
@configurable constant AGILITY_BASE       = new BonusSettings("Base agility")
@configurable constant INTELLIGENCE_BASE  = new BonusSettings("Base intelligence")
@configurable constant HP_REGEN           = new BonusSettings("HP regeneration", 256)
@configurable constant MP_REGEN           = new BonusSettings("MP regeneration", 256)
@configurable constant HP_REGEN_PERCENT   = new BonusSettings("%HP regeneration", 4096)
@configurable constant MP_REGEN_PERCENT   = new BonusSettings("%MP regeneration", 4096)
@configurable constant MOVE_SPEED         = new BonusSettings("Move speed", 0, 525, 5)
@configurable constant DAMAGE_BASE        = new BonusSettings("Damage")

public class BonusNotImpl extends Bonus
	construct(string name)
		super(name)

		changeClosure = (unit _u, int _current, int _val) -> begin
			Log.error("Attempted use of Bonus \"" + name + "\" but it is not implemented!")
		end

function notImpl(string name) returns Bonus
	return new BonusNotImpl(name)

public constant BONUS = new BonusesClass()

@compiletime function initialize()
	if BONUS != null	
init
	initialize()

class BonusesClass extends BonusUserSpecified

	constant damage = not DAMAGE.doImpl ? notImpl(DAMAGE.name) :
		new ExponentialAbilityBonus(DAMAGE.name, DAMAGE.min, DAMAGE.max, (int id, int val) -> begin
			new AbilityDefinitionAttackBonusPlus1(id)..setAttackBonus(1, val)
		end)

	constant attackSpeed = not ATTACK_SPEED.doImpl ? notImpl(ATTACK_SPEED.name) :
		new ExponentialAbilityBonus(ATTACK_SPEED.name, ATTACK_SPEED.min, ATTACK_SPEED.max, (int id, int val) -> begin
			new AbilityDefinitionAttackSpeedIncrease(id)..setAttackSpeedIncrease(1, val * 0.01)
		end)

	constant armor = not ARMOR.doImpl ? notImpl(ARMOR.name) :
		new ExponentialAbilityBonus(ARMOR.name, ARMOR.min, ARMOR.max, (int id, int val) -> begin
			new AbilityDefinitionDefenseBonusPlus1(id)..setDefenseBonus(1, val)
		end)

	constant hp = not HP.doImpl ? notImpl(HP.name) :
		new ExponentialAbilityBonus(HP.name, HP.min, HP.max, (int id, int val) -> begin
			new AbilityDefinitionMaxLifeBonusGreater(id)..setMaxLifeGained(1, val)
		end)

	constant mp = not MP.doImpl ? notImpl(MP.name) :
		new ExponentialAbilityBonus(MP.name, MP.min, MP.max, (int id, int val) -> begin
			new AbilityDefinitionMaxManaBonusMost(id)..setMaxManaGained(1, val)
		end)
	
	constant strength = not STRENGTH.doImpl ? notImpl(STRENGTH.name) :
		new CodeBonus(STRENGTH.name, STRENGTH.min, STRENGTH.max, (unit u, int _current, int bonus) -> begin
			SetHeroStr(u, GetHeroStr(u, true) + bonus, false)
		end)

	constant agility = not AGILITY.doImpl ? notImpl(AGILITY.name) :
		new CodeBonus(AGILITY.name, AGILITY.min, AGILITY.max, (unit u, int _current, int bonus) -> begin
			SetHeroAgi(u, GetHeroAgi(u, true) + bonus, false)
		end)

	constant intelligence = not INTELLIGENCE.doImpl ? notImpl(INTELLIGENCE.name) :
		new CodeBonus(INTELLIGENCE.name, INTELLIGENCE.min, INTELLIGENCE.max, (unit u, int _current, int bonus) -> begin
			SetHeroInt(u, GetHeroInt(u, true) + bonus, false)
		end)

	constant strengthBase = not STRENGTH_BASE.doImpl ? notImpl(STRENGTH_BASE.name) : 
		new CodeBonus(STRENGTH_BASE.name, STRENGTH_BASE.min, STRENGTH_BASE.max, (unit u, int _current, int bonus) -> begin
			SetHeroStr(u, GetHeroStr(u, false) + bonus, true)
		end)

	constant agilityBase = not AGILITY_BASE.doImpl ? notImpl(AGILITY_BASE.name) :
		new CodeBonus(AGILITY_BASE.name, AGILITY_BASE.min, AGILITY_BASE.max, (unit u, int _current, int bonus) -> begin
			SetHeroAgi(u, GetHeroAgi(u, false) + bonus, true)
		end)

	constant intBase = not INTELLIGENCE_BASE.doImpl ? notImpl(INTELLIGENCE_BASE.name) :
		new CodeBonus(INTELLIGENCE_BASE.name, INTELLIGENCE_BASE.min, INTELLIGENCE_BASE.max, (unit u, int _current, int bonus) -> begin
			SetHeroInt(u, GetHeroInt(u, false) + bonus, true)
		end)

	constant hpRegen = not HP_REGEN.doImpl ? notImpl(HP_REGEN.name) :
		new ExponentialAbilityBonus(HP_REGEN.name, HP_REGEN.min, HP_REGEN.max, (int id, int val) -> begin
			new AbilityDefinitionRegenLifeArll(id)..setHitPointsRegeneratedPerSecond(1, val)
		end)

	constant mpRegen = not MP_REGEN.doImpl ? notImpl(MP_REGEN.name) :
		new ExponentialAbilityBonus(MP_REGEN.name, MP_REGEN.min, MP_REGEN.max, (int id, int val) -> begin
			new AbilityDefinitionNeutralRegenmanaonly(id)
				..setPercentage(1, false)
				..setAreaofEffect(1, 1)
				..setTargetsAllowed(1, "self")
				..setAmountRegenerated(1, val * 1.)
		end)

	constant hpRegenPercent = not HP_REGEN_PERCENT.doImpl ? notImpl(HP_REGEN_PERCENT.name) :
		new ExponentialAbilityBonus(HP_REGEN_PERCENT.name, HP_REGEN_PERCENT.min, HP_REGEN_PERCENT.max, (int id, int val) -> begin
			new AbilityDefinitionNeutralRegenmanaonly(id)
				..setPercentage(1, true)
				..setAreaofEffect(1, 1)
				..setTargetsAllowed(1, "self")
				..setAmountRegenerated(1, val * 1.)
		end)

	constant mpRegenPercent = not MP_REGEN_PERCENT.doImpl ? notImpl(MP_REGEN_PERCENT.name) :
		new ExponentialAbilityBonus(MP_REGEN_PERCENT.name, MP_REGEN_PERCENT.min, MP_REGEN_PERCENT.max, (int id, int val) -> begin
			new AbilityDefinitionItemRegenMana(id)..setManaRegenerationBonusasfractionofnormal(1, val * 0.01)
		end)

	constant damageBase = not DAMAGE_BASE.doImpl ? notImpl(DAMAGE_BASE.name) :
		new BaseDamageBonus(DAMAGE_BASE.name)

	constant moveSpeed = not MOVE_SPEED.doImpl ? notImpl(MOVE_SPEED.name) :
		new MoveSpeedBonus(MOVE_SPEED.name, MOVE_SPEED.min, MOVE_SPEED.max, MOVE_SPEED.resolution)