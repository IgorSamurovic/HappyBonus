package Bonus
/*  By HappyTauren */
/* 
	Welcome to the Bonus package!

	The purpose of this package is to create a framework in which you can easily create bonuses based on
	some basic unit stats. Those include, but are not limited to, damage, armor, str/agi/int attributes,
	hit points, mana, attack and move speed. Instead of creating a new ability or coding every addition
	to the unit's stats by hand, this system offers those functionalities in one line of code, whenever
	Bonus is imported.
	
	It's as easy as this...										...but it is just as easy to take it back!

		someUnit.addBonus(BONUS.damage, 5)	 						someUnit.removeBonus(BONUS.damage, 5) 

	
*/
import public initlater BonusImpl
import ObjectIdGenerator
import AbilityObjEditing
import HashMap
import UnitIndexer

/* Unit API */

/** This instance is the replacement for static access to the <T>emplated class */
constant unitBonus = new BonusMap<unit>

/** Returns the map that contains all values of all bonuses applied to this unit,
 indexed by their Bonus object */
public function unit.getBonusMap() returns BonusMap<unit>
    return unitBonus.of(this)

/** Returns the int value of a specific bonus for this unit */
public function unit.getBonus(Bonus typ) returns int
    return this.getBonusMap().get(typ)

/** Adds an amount of a bonus to the unit, running a closure associated with it */ 
public function unit.addBonus(Bonus typ, int val)
    let map = this.getBonusMap()
    let current = map.get(typ)
    //print("[" + typ.getName() + "] Current: " + current.toString() + " Added: " + val.toString())
    typ.change(this, current, val)
    map.add(typ, val)
	
/** Removes an amount of a bonus of this unit */
public function unit.removeBonus(Bonus typ, int val)
    this.addBonus(typ, -val)
	
init/* Destroy the associated bonus map once the unit is deindexed */ 
    onUnitDeindex(() -> destroy getDeindexedUnit().getBonusMap())


/* This is the main API package used for Bonus. Do not import any other file in this folder! */

/** Instances of this class are used to define whether a Bonus is going to be generated at all,
what its name and tooltip strings are */
public class BonusSettings
	/** Use this constant setings object to stop a bonus from generating */
    static constant none = new BonusSettings()..dontImpl()
	
	/* Data */
	string name
    int min
	int max
	int resolution = 1
    bool doImpl = true

    function dontImpl()
		doImpl = false
		
	construct(string name, int min, int max, int resolution)
        this.name = name
        this.min = min
        this.max = max
		this.resolution = resolution

    construct(string name, int min, int max)
        this.name = name
        this.min = min
        this.max = max

    construct(string name, int range)
        this.name = name
        this.min = -range
        this.max =  range

	construct(string name)
		this.name = name
		this.min = -1000000
		this.max =  1000000
		
    construct()

public interface BonusMapI
    function getMap() returns IterableMap<Bonus, int>
    function add(BonusMapI that)
    function remove(BonusMapI that)

public class BonusMap<T> implements BonusMapI
    protected IterableMap<Bonus, int> bonusMap
    protected HashMap<T, thistype> instanceMap
    protected T mapRef

    function getMap() returns IterableMap<Bonus, int>
        return bonusMap

    function add(BonusMapI that)
        let map = that.getMap()
        for bonus in map
            add(bonus, map.get(bonus))
            //print(bonus.getName() + " " + map.get(bonus).toString())

    function remove(BonusMapI that)
        let map = that.getMap()
        for bonus in map
            remove(bonus, map.get(bonus))
            //print(bonus.getName() + " " + map.get(bonus).toString())

    function add(Bonus typ, int val)
        if typ != null and val != 0
            let current = bonusMap.get(typ)
            bonusMap.put(typ, current + val)

    function remove(Bonus typ, int val)
        add(typ, -val)

    /** Returns a value of the given bonus */
    function get(Bonus typ) returns int
        return bonusMap.get(typ)

    /** Returns the Bonuses instance associated with the given unit */
    function of(T t) returns BonusMap<T>
        var instance = (1 castTo thistype).instanceMap.get(t)
        if instance == null
            instance = new BonusMap(t)
        return instance

    /** This constructor should only be used once, to create an instnce to be used
    as a pretend static member. */
    construct()
        if this castTo int == 1
            instanceMap = new HashMap<T, thistype>

    /** Creates a bonus map that's attached to an object of type T */
    construct(T t)
        mapRef = t
        bonusMap = new IterableMap<Bonus, int>
        (1 castTo thistype).instanceMap.put(t, this)

    ondestroy
        destroy bonusMap
        if mapRef != null
            instanceMap.remove(mapRef)

/** This closure is executed every time a bonus is changed */
public interface BonusChangeClosure
    function run(unit u, int current, int bonus)

/** Every bonus type the user wants to add to the system must extend this class */
public abstract class Bonus
	protected static constant ID_GEN = new IdGenerator('xx00')
	
	static function generateId() returns int
		return ID_GEN.next()

    protected string name
    protected int minBonus = 0
    protected int maxBonus = 1
    protected BonusChangeClosure changeClosure

    function getName() returns string
        return name

    /** Sets the minimum bonus value to a nonpositive number */
    protected function setMinBonus(int val)
        minBonus = min(0, val)

    /** Sets the maximum bonus value to a nonnegative number */
    protected function setMaxBonus(int val)
        maxBonus = max(1, val)

    protected function setChangeClosure(BonusChangeClosure val)
        changeClosure = val

    /** Clamps the value to be within limits set in minBonus and maxBonus fields */
    protected function clamp(int val) returns int
        int retVal = val
        if val < minBonus
            retVal = minBonus
        else if val > maxBonus
            retVal = maxBonus
        return retVal

    function change(unit u, int current, int bonus)
        changeClosure.run(u, current, bonus)

    construct(string name)
        this.name = name

/* Exponential Ability Bonus */

/** A closure that provides id and value for ability-based bonuses */
interface ExponentialAbilityBonusClosure
    function run(int id, int value)

/** Ability bonus that relies on having positive exponential increments (2, 4, 8, etc)
and one negative decrement */
public class ExponentialAbilityBonus extends Bonus
    protected static int array pow2 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768,
                                       65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608]
    protected int maxPower
    protected int array[100] abils
    protected int abilNegative

    /** Gets the power of two necessary to cover the given value */
    protected function getPower(int max) returns int
        var power = 0
        var maxVal = 1
        for i = 0 to 24
            maxVal += pow2[power]
            if maxVal > max
                break
            else
                power++
        return power

    /* Functionalities used during the change call */

    protected unit affectedUnit
    protected int needToAdd

    protected function enable(int power)
        needToAdd -= pow2[power]
        print("OBJ NAME: " + GetObjectName(abils[power]))
        affectedUnit.addAbility(abils[power])

    protected function disable(int power)
        affectedUnit.removeAbility(abils[power])

    protected function enableNegative()
        affectedUnit.addAbility(abilNegative)

    protected function disableNegative()
        affectedUnit.removeAbility(abilNegative)

    function constructor(int min, int max, ExponentialAbilityBonusClosure processFunction)
        this.maxPower = getPower(max)
        this.maxBonus = max(0, max)
        this.minBonus = min(0, min)

        for power = 0 to maxPower
            let id = generateId()
            abils[power] = id
            processFunction.run(id, pow2[power])

        if min < 0
            abilNegative = generateId()
            processFunction.run(abilNegative, -pow2[maxPower])

        /* Define the change function */
        changeClosure = (unit u, int current, int bonus) -> begin
            this.affectedUnit = u
            var shouldAddNegative = false
            if bonus != 0
                needToAdd = clamp(current + bonus)
                if needToAdd == 0
                    disableNegative()
                    for power = 0 to maxPower
                        disable(power)
                else
                    if needToAdd < 0
                        shouldAddNegative = true
                        needToAdd -= minBonus
                    else
                        disableNegative()

                    for power = maxPower downto 0
                        if needToAdd >= pow2[power]
                            enable(power)
                        else
                            disable(power)

                    if shouldAddNegative
                        enableNegative()
        end
        
    construct(string name, int min, int max, ExponentialAbilityBonusClosure processFunction)
        super(name)
        constructor(min, max, processFunction)

/* Ability Level Bonus */

public class AbilityLevelBonus extends Bonus
    protected int abilId
    protected int bonusToLevel = 1
    protected bool forceAdd = false

    function getAbilId() returns int
        return abilId

    /** Sets the number of points that get converted to one level. A setting of 5 means that for every 5 points
    of the bonus, the unit gains one level of the ability.
    This field is equal to 1 by default. */
    protected function setBonusToLevel(int val)
        bonusToLevel = val

    function constructor(int maxLevel, bool forceAdd, int abilId)
        setMinBonus(0)
        setMaxBonus(maxLevel)
        this.forceAdd = forceAdd
        this.abilId = abilId

        /* Define the change function */
        changeClosure = (unit u, int current, int bonus) -> begin
            let targetLvl = clamp(current + bonus) div bonusToLevel
            if targetLvl > 0
                if current > 0 or forceAdd
                    if not u.hasAbility(abilId)
                        u.addAbility(abilId)
                    u.setAbilityLevel(abilId, targetLvl)
            else
                u.removeAbility(abilId)
        end

	construct(string name)
		super(name)

    construct(string name, int maxLevel, bool forceAdd, int abilId)
        super(name)
        constructor(maxLevel, forceAdd, abilId)

    construct(string name, int maxLevel, bool forceAdd, bool visible, AbilityDefinition def)
        super(name)
        if not visible
            def
            ..setButtonPositionNormalX(0)
            ..setButtonPositionNormalY(-11)
            ..setButtonPositionTurnOffX(0)
            ..setButtonPositionTurnOffY(-11)
        constructor(maxLevel, forceAdd, def.getNewId())

/* Ability Bonus */

/** Essentially the same as AbilityLevelBonus, but it uses one ability, and one level.
This class is useful for creating an ability that's possible to get from multiple sources,
but when one source of it is removed, the ability will remain on the unit. */
public class AbilityBonus extends AbilityLevelBonus

    construct(string name, bool visible, AbilityDefinition def)
        super(name, 1, true, visible, def)

    construct(string name, int abilId)
        super(name, 1, true, abilId)

/* Code Bonus */

/** This type of Bonus depends on the user specifying a closure to be ran when the bonus is
increased or decreased.
Example: Attribute (STR/AGI/INT) bonuses use this feature in the default implementation. */
public class CodeBonus extends Bonus

    construct(string name, int min, int max, BonusChangeClosure changeClosure)
        super(name)
        setMinBonus(min)
        setMaxBonus(max)
        setChangeClosure(changeClosure)
        
    construct(BonusSettings bs, BonusChangeClosure changeClosure)
        super(bs.name)
        setMinBonus(bs.min)
        setMaxBonus(bs.max)
        setChangeClosure(changeClosure)